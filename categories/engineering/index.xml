<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dans Stuff</title>
    <link>http://danmux.com/categories/engineering/index.xml</link>
    <description>Recent content on Dans Stuff</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://danmux.com/categories/engineering/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>The Cult of Go Test</title>
      <link>http://danmux.com/posts/the_cult_of_go_test/</link>
      <pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://danmux.com/posts/the_cult_of_go_test/</guid>
      <description>&lt;p&gt;A favourite test helper library, with some simple test assertion functions clearly has some value. But this post puts forward some useable concrete arguments why they are normally just not worth it.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;After five years with Go and the last three in a (now) 100% Go team I&amp;rsquo;ve worked with around 30 Go developers - not a huge amount, but not insignificant. The one thing that new people to the team challenge most is the lack of their favorite test helpers. People generally are OK that we don&amp;rsquo;t need a whole framework, but the small simple assertions? Why are they so bad?&lt;/p&gt;

&lt;h2 id=&#34;tl-dr&#34;&gt;tl;dr&lt;/h2&gt;

&lt;p&gt;They are not so bad, but they come at a cost, defer to avoid them.&lt;/p&gt;

&lt;h2 id=&#34;three-reactions&#34;&gt;Three Reactions&lt;/h2&gt;

&lt;p&gt;This came up again recently and as I prepared to put forward the case against assert libs a learned colleague reminded me that this is still a case of bike-shedding. So if like us you have bigger problems, park this, and focus on them. However I&amp;rsquo;m putting pen to paper so I can point people at it in future, and it may help others. At first this recent tweet from @KentBeck first felt relevant:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Don&amp;#39;t spend more time discussing a reversible change than it would take to make (&amp;amp; potentially reverse) the change&lt;/p&gt;&amp;mdash; Kent Beck (@KentBeck) &lt;a href=&#34;https://twitter.com/KentBeck/status/792911449249026048&#34;&gt;October 31, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;But then actually once you have &lt;code&gt;assert.Equals&lt;/code&gt; dotted throughout the tests the cost of removing it becomes unaffordable. Once you commit to one of the assertion libs it becomes hard to reverse that change. In that respect it is an expensive decision.&lt;/p&gt;

&lt;p&gt;Perhaps it was somewhat lucky that when I started writing Go code that no assertion libs existed, so I was forced to learn to live without them (I had been working with python and Java most recently prior to that) I felt the same surprise then as people do now! Years ago when &lt;code&gt;testify&lt;/code&gt; was young, I immediately started using it. It was only then as I had to learn how it worked, and work round its bugs and surprises, that I first came to think that perhaps my last 10+ years of unit testing had been overly complicated. (I expect there are many developers who don&amp;rsquo;t remember any of the xUnits existing - when each new project needed time to write the test harness or at least copying in some previous &lt;a href=&#34;http://www.martinfowler.com/bliki/Seedwork.html&#34;&gt;seedwork&lt;/a&gt; as Fowler called it. At the time jUnit felt like a godsend.&lt;/p&gt;

&lt;p&gt;This repeating conversation with engineers new to the team (or new to the stdlib only approach) could be grouped into one of three catagories of response:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interesting&lt;/strong&gt; - I&amp;rsquo;ve always felt a bit uneasy about the need for all this extra stuff - lets give this a go.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Really&lt;/strong&gt; - I&amp;rsquo;m pretty sure its going to be worse without the test lib/framework (dsl) im used to - but lets see if im right.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;What!&lt;/strong&gt; - thats just ignoring all the other testing stuff that happened in other things and is almost certainly a retrograde step.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There is a subtly different class of response for people who have been using Go for a while and have already chosen one of the test helper libraries, and have not yet &lt;em&gt;tried&lt;/em&gt; plain go test. When I say &lt;em&gt;&amp;lsquo;tried&amp;rsquo;&lt;/em&gt; I mean actually stuck with it for a few months - not wrote some plain tests in the first few weeks and immediately added a familiar looking assertion lib.&lt;/p&gt;

&lt;p&gt;In all three cases most people will give it some open minded time and form an opinion based on their now real world experience. In general people start to at least get comfortable with, if not actually value, the approach. During this time when a bit of effort is expended on learning a few of these tips the adoption is improved.&lt;/p&gt;

&lt;p&gt;In the worse case even after working with plain go test, some developers really struggle to understand or accept why they should not use their choice of helpers, occasionally attempting to sway opinion by challenging the intelligence and integrity of the team with accusations of cult like behaviour (cargo or otherwise). &amp;ldquo;Kool-aid&amp;rdquo; gets mentioned more than once. It will take a greater depth of argument than that to challenge this new (or retrograde, depending on your stance) well considered approach. From having spoken to team members and other teams and at conferences and from lots of stuff online it is clear that I am not alone in having thought about this a lot.&lt;/p&gt;

&lt;p&gt;This poll is possibly not great quality, and almost certainly somewhat self selecting but illustrates that at least some folk also prefer plain go test according to this &lt;a href=&#34;http://www.strawpoll.me/1716206/r&#34;&gt;Straw Poll&lt;/a&gt;&lt;/p&gt;

&lt;iframe src=&#34;http://www.strawpoll.me/embed_1/1716206/r&#34; style=&#34;width:680px;height:541px;border:0;&#34;&gt;Loading poll...&lt;/iframe&gt;

&lt;h2 id=&#34;not-such-a-big-thing&#34;&gt;Not Such a Big thing&lt;/h2&gt;

&lt;p&gt;(but it feels like it is fundamental!)&lt;/p&gt;

&lt;p&gt;It really isn&amp;rsquo;t such a big deal in any case, either way is OK, each team should make the call, but once it has been made it should be kept consistent. The mix of both plain go and assertions libs - clearly dilutes the benefits of consistency, particularly if multiple helper libs are added.&lt;/p&gt;

&lt;p&gt;Without doubt assertions can reduce verbosity in the tests, but as the code samples below will demonstrate when the stdlib tests are well written there is not that much in it. Clearly typing effort is not the final arbiter (by any means) in assessing the best approach, but it an important factor. There are other good, if subtle, reasons to stick with plain go test even if it may take more effort.&lt;/p&gt;

&lt;p&gt;Before looking at some specific examples of how stdlib tests compete well with assertion libraries (on various factors including effort) here are the bare minimum things to have read that start to explain the position.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/faq#testing_framework&#34;&gt;https://golang.org/doc/faq#testing_framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/faq#assertions&#34;&gt;https://golang.org/doc/faq#assertions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth hearing the reason for Blake Mizerany (of Sinatra fame) to do this..&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://danmux.com/img/just-use-stdlib.png&#34; alt=&#34;Blake sees the light&#34; title=&#34;just use stdlib&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Explained in this presentation&amp;hellip;&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/yi5A3cK1LNA&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;real-world-example&#34;&gt;Real World Example&lt;/h2&gt;

&lt;p&gt;Here is some real world test code that tends to favour an assertion library as there are only two fixtures to test a single function.&lt;/p&gt;

&lt;p&gt;The test was initially written with &lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;testify&lt;/a&gt; :&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/danmux/cbe74e643538bb0ff9c2bf78511d630e.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&amp;hellip;A compact 25 lines and 529 chars typed.&lt;/p&gt;

&lt;p&gt;This was then rewritten in plain go test in a very imperative style&amp;hellip;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/danmux/64b4c47b2b25676adb7b3c18ac6193ac.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&amp;hellip;41 lines, but only 646 Chars typed - just 120 chars more than the assert lib.&lt;/p&gt;

&lt;p&gt;Then even though there are only two fixtures a table test and deep equals was tried&amp;hellip;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/danmux/8e4e727ac36dcada592c882cd2384e9a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&amp;hellip;35 lines and 643 chars typed - yay we saved 3 chars! of course the table approach starts to pay off with more fixtures.&lt;/p&gt;

&lt;p&gt;The same test with a small local helper assert function&amp;hellip;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/danmux/c805910f0727698581696f6e715843c0.js&#34;&gt;&lt;/script&gt; 

&lt;p&gt;&amp;hellip;Only 30 lines but more typing - the assert lib uses the correct line number, in this test our failures would all come from line 7 so we have to add the &lt;code&gt;valid&lt;/code&gt; and &lt;code&gt;invalid&lt;/code&gt; words so it is clear where the failure is from thereby adding to the character count. Hence: 708 chars typed, without them it would be closer to 650 chars.&lt;/p&gt;

&lt;p&gt;You may end up writing or dare I say C&amp;amp;P-ing this and similar helpers many times for good readability, and with little harm.&lt;/p&gt;

&lt;p&gt;Written again with the comparisons factored into its own helper&amp;hellip;&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/danmux/e7fe6c833a784a94200f463ac197ca29.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&amp;hellip;Now it is down to 28 lines and 637 chars, the lowest line and char count of all the contenders.&lt;/p&gt;

&lt;p&gt;In all &amp;lsquo;none assertion&amp;rsquo; cases the number of characters needed is more, but trivially so - and are a constant offset, not linear, adding more fixtures does not grow the delta between assertion and none assertion (assuming that the assertion based test also migrates to using tables as well). The delta can grow as more things are being tested.&lt;/p&gt;

&lt;p&gt;All the above tests are imperfect and can be pared down or improved but it is enough to provide a comparison to discuss.&lt;/p&gt;

&lt;p&gt;Although as the number of fixtures increase the table and larger local helper may be the best approach for this simple case the implicit test is probably the best because the failures are reported at the line numbers of the &lt;code&gt;t.Error&lt;/code&gt; so for the few extra chars the helpers are not worth it.&lt;/p&gt;

&lt;h2 id=&#34;the-implications&#34;&gt;The Implications&lt;/h2&gt;

&lt;p&gt;An essential function of tests is to help document the thing under test, some approaches to testing can reduce this documentation effect, but in this case the assertion lib does not overly abstract or otherwise hide the real function under test - so as documentation it is ok.&lt;/p&gt;

&lt;p&gt;It does need concerted effort to structure and write clear tests in go test to accomplish a comparable succinctness - but this is a good thing.&lt;/p&gt;

&lt;p&gt;The assertion style is (very slightly) more concise.&lt;/p&gt;

&lt;p&gt;But at what cost.&lt;/p&gt;

&lt;h3 id=&#34;indirection-and-gotchas&#34;&gt;Indirection and Gotchas&lt;/h3&gt;

&lt;p&gt;The functional indirection is also present in our local test helper cases but the helper is &lt;em&gt;local&lt;/em&gt; - its right there in the code and is a few very easily understood lines, and the arguments are typed.&lt;/p&gt;

&lt;p&gt;There is another semantic indirection in the assertion lib, something of a mini DSL to learn:&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Equals&lt;/code&gt; and &lt;code&gt;Nil&lt;/code&gt;, &lt;code&gt;NotNil&lt;/code&gt; are in another package and we make assumptions based on their naming&lt;/p&gt;

&lt;p&gt;I think it is a mistake to remove type safety from a unit test (I feel &lt;em&gt;somewhat&lt;/em&gt; differently about testing some across the wire API&amp;rsquo;s)&lt;/p&gt;

&lt;p&gt;You have to know and think about the &lt;code&gt;Equals&lt;/code&gt; having type checking entirely removed. The following should never both pass, but they do:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;assert.Equal(t,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;iban.Bban,&lt;/span&gt; &lt;span style=&#34;color: #ed9d13&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #d0d0d0&#34;&gt;assert.Equal(t,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;iban.Bban,&lt;/span&gt; &lt;span style=&#34;color: #3677a9&#34;&gt;123&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may well know of another equality assertion in your favorite library that does type checking as well - but I expect that is only at runtime. There is considerable value in failing during compilation (more on the DSL later).&lt;/p&gt;

&lt;p&gt;Pointer equality is another unnecessarily introduced gotcha:&lt;/p&gt;

&lt;p&gt;e.g. this testify issue&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/stretchr/testify/issues/296&#34;&gt;https://github.com/stretchr/testify/issues/296&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hi Rob,&lt;/p&gt;

&lt;p&gt;It should be applicable to all pointers.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;NotEqual&lt;/code&gt; is comparing the values the pointers point to, rather than the
pointer addresses.&lt;/p&gt;

&lt;p&gt;We must make that clear in the docs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This issue was closed with &lt;strong&gt;clearer documentation&lt;/strong&gt;. So to understand how and when to use NotEqual you have to carefully read the documentation or inspect the code. The fundamentals of the issue captured more succinctly in this snippet.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/QA6WK4aNfA&#34;&gt;https://play.golang.org/p/QA6WK4aNfA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Something naturally avoided in explicit comparison.&lt;/p&gt;

&lt;p&gt;These &lt;code&gt;Equals&lt;/code&gt; and friends add another thing to learn for us and for every new engineer for ever more, and it is just another thing to be tripped up by, and then it does not solve the testing debate completely. In fact it creates its own new debate: the &amp;ldquo;I prefer x over y lib/framework&amp;rdquo; debate. Which DSL is best?&lt;/p&gt;

&lt;h3 id=&#34;the-not-so-mini-dsl-https-en-wikipedia-org-wiki-domain-specific-language&#34;&gt;The (not so) Mini &lt;a href=&#34;https://en.wikipedia.org/wiki/Domain-specific_language&#34;&gt;DSL&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Equality never looked so complicated. What follows are some public API functions from testify:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// ObjectsAreEqual determines if two objects are considered equal.&lt;/span&gt;
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;//&lt;/span&gt;
&lt;span style=&#34;color: #999999; font-style: italic&#34;&gt;// This function does no assertion of any kind.&lt;/span&gt;
&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;ObjectsAreEqual(expected,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;actual&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;{})&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(btw what does the comment &amp;ldquo;This function does no assertion of any kind.&amp;rdquo; mean)&lt;/p&gt;

&lt;p&gt;Then there are the following&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;ObjectsAreEqualValues(expected,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;actual&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;{})&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;EqualValues(t&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;TestingT,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;expected,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;actual&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;{},&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;msgAndArgs&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;{})&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Exactly(t&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;TestingT,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;expected,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;actual&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;{},&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;msgAndArgs&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;{})&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;

&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;Equal(t&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;TestingT,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;expected,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;actual&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;{},&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;msgAndArgs&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;{})&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then why is this &amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;NotEqual(t&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;TestingT,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;expected,&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;actual&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;{},&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;msgAndArgs&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;...&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;interface&lt;/span&gt;&lt;span style=&#34;color: #d0d0d0&#34;&gt;{})&lt;/span&gt; &lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;different from &lt;code&gt;!Equal(...&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;Testify is one of the more simple libraries - with a smaller DSL to learn, but there is still a reasonable amount of explicit knowledge needed to not get tripped up.&lt;/p&gt;

&lt;p&gt;Take a look at another larger one&amp;hellip; &lt;a href=&#34;http://goconvey.co/&#34;&gt;GoConvey&lt;/a&gt; who prodly announce&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Expressive DSL&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What will happen when you write:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;So(x, ShouldAlmostEqual, 2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&lt;code&gt;So(y, ShouldNotResemble, 2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here are all the other assertions we need to learn to become effective&amp;hellip;&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #202020&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #6ab825; font-weight: bold&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldEqual&lt;/span&gt;          &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldEqual&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotEqual&lt;/span&gt;       &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotEqual&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldAlmostEqual&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldAlmostEqual&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotAlmostEqual&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotAlmostEqual&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldResemble&lt;/span&gt;       &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldResemble&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotResemble&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotResemble&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldPointTo&lt;/span&gt;        &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldPointTo&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotPointTo&lt;/span&gt;     &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotPointTo&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeNil&lt;/span&gt;          &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeNil&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotBeNil&lt;/span&gt;       &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotBeNil&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeTrue&lt;/span&gt;         &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeTrue&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeFalse&lt;/span&gt;        &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeFalse&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeZeroValue&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeZeroValue&lt;/span&gt;

	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeGreaterThan&lt;/span&gt;          &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeGreaterThan&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeGreaterThanOrEqualTo&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeGreaterThanOrEqualTo&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeLessThan&lt;/span&gt;             &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeLessThan&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeLessThanOrEqualTo&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeLessThanOrEqualTo&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeBetween&lt;/span&gt;              &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeBetween&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotBeBetween&lt;/span&gt;           &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotBeBetween&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeBetweenOrEqual&lt;/span&gt;       &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeBetweenOrEqual&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotBeBetweenOrEqual&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotBeBetweenOrEqual&lt;/span&gt;

	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldContain&lt;/span&gt;       &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldContain&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotContain&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotContain&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldContainKey&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldContainKey&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotContainKey&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotContainKey&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeIn&lt;/span&gt;          &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeIn&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotBeIn&lt;/span&gt;       &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotBeIn&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeEmpty&lt;/span&gt;       &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeEmpty&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotBeEmpty&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotBeEmpty&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldHaveLength&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldHaveLength&lt;/span&gt;

	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldStartWith&lt;/span&gt;           &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldStartWith&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotStartWith&lt;/span&gt;        &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotStartWith&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldEndWith&lt;/span&gt;             &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldEndWith&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotEndWith&lt;/span&gt;          &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotEndWith&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeBlank&lt;/span&gt;             &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeBlank&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotBeBlank&lt;/span&gt;          &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotBeBlank&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldContainSubstring&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldContainSubstring&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotContainSubstring&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotContainSubstring&lt;/span&gt;

	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldPanic&lt;/span&gt;        &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldPanic&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotPanic&lt;/span&gt;     &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotPanic&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldPanicWith&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldPanicWith&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotPanicWith&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotPanicWith&lt;/span&gt;

	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldHaveSameTypeAs&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldHaveSameTypeAs&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotHaveSameTypeAs&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotHaveSameTypeAs&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldImplement&lt;/span&gt;         &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldImplement&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotImplement&lt;/span&gt;      &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotImplement&lt;/span&gt;

	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldHappenBefore&lt;/span&gt;         &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldHappenBefore&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldHappenOnOrBefore&lt;/span&gt;     &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldHappenOnOrBefore&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldHappenAfter&lt;/span&gt;          &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldHappenAfter&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldHappenOnOrAfter&lt;/span&gt;      &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldHappenOnOrAfter&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldHappenBetween&lt;/span&gt;        &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldHappenBetween&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldHappenOnOrBetween&lt;/span&gt;    &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldHappenOnOrBetween&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotHappenOnOrBetween&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotHappenOnOrBetween&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldHappenWithin&lt;/span&gt;         &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldHappenWithin&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldNotHappenWithin&lt;/span&gt;      &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldNotHappenWithin&lt;/span&gt;
	&lt;span style=&#34;color: #d0d0d0&#34;&gt;ShouldBeChronological&lt;/span&gt;      &lt;span style=&#34;color: #d0d0d0&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #d0d0d0&#34;&gt;assertions.ShouldBeChronological&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dependencies don&amp;rsquo;t come for free.&lt;/p&gt;

&lt;p&gt;GoConvey only clocks in at 8300 lines, but its assertion package will introduce a further 26,000 lines (including a number of test libraries by Aaron Jacobs).&lt;/p&gt;

&lt;p&gt;The code extracted from testify just to support &lt;code&gt;Equals&lt;/code&gt; is 323 lines and 8200 characters, the full package adds 14,000 lines and exports 80 functions.&lt;/p&gt;

&lt;p&gt;One of the larger libraries used by the &lt;a href=&#34;https://github.com/onsi/ginkgo&#34;&gt;Ginkgo&lt;/a&gt; framework is &lt;a href=&#34;https://onsi.github.io/gomega/&#34;&gt;Gomega&lt;/a&gt; it has 1500 lines of documentation and just under 12,000 lines, Ginkgo has 20,000 lines - these counts don&amp;rsquo;t include any other dependencies.&lt;/p&gt;

&lt;p&gt;(for clarity: &lt;em&gt;&amp;ldquo;lines&amp;rdquo;&lt;/em&gt; is lines in all go files using the naive &lt;code&gt;find . -name &#39;*.go&#39; | xargs wc -l&lt;/code&gt; simply to get a sense of scale)&lt;/p&gt;

&lt;p&gt;The one thing these libs have in common is bugs. It is annoying enough to have to debug test code, let alone 3rd party test support libraries.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Hopefully this post demonstrates that the value these assertion libs add is, at least, arguable and also details some of the complexities they add in exchange. As much as the arguments for an assertion lib are clear, perhaps this has helped tip the balance in favour of the stdlib approach.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;No doubt assertion libs can reduce typing and repetition.&lt;/li&gt;
&lt;li&gt;Reductions in typing with assertion libs are not profound.&lt;/li&gt;
&lt;li&gt;The necessary repetition without assertion libs can be minimised.&lt;/li&gt;
&lt;li&gt;Some repetition locally can increase readability at no great cost.&lt;/li&gt;
&lt;li&gt;There is a burden of extra care in writing plain go tests - arguably a good thing.&lt;/li&gt;
&lt;li&gt;Type safety is often dropped - or needs explicit knowledge, or is only enforced at runtime.&lt;/li&gt;
&lt;li&gt;Pointers vs value comparisons can easily trip up the unwary.&lt;/li&gt;
&lt;li&gt;There is a DSL to learn - often considerable - an extra burden on the team and new members forever.&lt;/li&gt;
&lt;li&gt;The libs often introduce multiple ways to achieve the same thing, or worse: similar but subtly different ways.&lt;/li&gt;
&lt;li&gt;It does not resolve the infighting - a new dev will argue for their favourite lib.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Adding the assertion lib in the middle of a project adds an annoying inconsistency.&lt;/li&gt;
&lt;li&gt;Some assertion libs tend to reduce the value of tests as documentation.&lt;/li&gt;
&lt;li&gt;You are adding another (often large) library dependency with associated maintenance overhead, bugs, life cycle etc.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;It is a commitment that will stay with you for a long time, and it is expensive to undo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I agree that not only is the discussion bike-shedding it appears to follow &lt;a href=&#34;https://en.wikipedia.org/wiki/Sayre%27s_law&#34;&gt;Sayre&amp;rsquo;s law&lt;/a&gt; (both this and the law of triviality I think are forms of availability bias, which I have &lt;a href=&#34;http://danmux.com/posts/test_pyramid_availability_bias/&#34;&gt;written about in the context of unit tests&lt;/a&gt;) and we should stay focussed on the bigger challenges.&lt;/p&gt;

&lt;p&gt;If I were to work with a team that has aligned on assertions in their testing, then I would, with some sadness, accept it and move on to things that really matter.&lt;/p&gt;

&lt;p&gt;The only value I can see in accepting an assertion library into an established stdlib only unit tests codebase is that like us, you have probably wasted many person-days discussing this. We certainly redo the same discussion for many new team members. If only I was convinced adding one of these libs would end the discussion, then I might agree to it (for the wrong reasons).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DRY&lt;/strong&gt; does not only apply to code. Next time I will point them at this, and hope it helps.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>What Golang Is and Is Not</title>
      <link>http://danmux.com/posts/what_golang_isnt/</link>
      <pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://danmux.com/posts/what_golang_isnt/</guid>
      <description>&lt;p&gt;We are all products of our own histories, and I suspect many routes to Go have been made less enjoyable by misguided expectations. The journey from when a budding developer first ‘hello worlded’ to now may have made Go’s more subtle strengths less obvious to them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Go is least of all about the language in and of itself, but rather about the broader things affected by it, more so than other languages I have used over the years.&lt;/p&gt;

&lt;p&gt;Many recent arrivals to Go have preconceptions that have been proved wrong and caused disappointment, this appears to happen most often when looking from a more purist computer science based language design point of view.&lt;/p&gt;

&lt;p&gt;Go is an engineering tool, in a much broader sense. To appreciate it properly I think you have to have spent a decent amount of time responsible for the full lifecycle. If all you ever do is write and commit code then much of Go will be lost on you.&lt;/p&gt;

&lt;h2 id=&#34;the-go-hype-or-not&#34;&gt;The Go Hype, or Not.&lt;/h2&gt;

&lt;p&gt;I have heard more than once that people have been disappointed by go given the hype surrounding it. I don’t remember anything really hype like 5 years ago when go was in its infancy, and I must say that I am not really aware of anything specific now. Of course any new language that is becoming better adopted, in particular as quickly as Go, will naturally attract attention.&lt;/p&gt;

&lt;p&gt;There are articles out there that sing Go’s praises, perhaps a little too highly, but I don’t remember many of them explicitly making any claims about the language itself being the reason why Go is so good.&lt;/p&gt;

&lt;h2 id=&#34;go-is-not-an-innovative-language&#34;&gt;Go is Not An Innovative Language&lt;/h2&gt;

&lt;p&gt;“Innovative” is such an overused and abused word that it has lost a lot of power and meaning. All innovation is contextual and to use the word without context is foolhardy. In the context of language design Go was never an innovative language, nor was it presented as such, or anyone dishonest in representing it that way.&lt;/p&gt;

&lt;p&gt;As a language Go was always explicitly a return to simplicity, and in many ways naivety, for sound reasons.&lt;/p&gt;

&lt;p&gt;“There is nothing new under the sun” rings true in all languages since the 80’s. Virtually everything we see in language design now that someone says is “innovative” has been explored in some form before. Go is certainly no exception, but remember it never claimed to be state of the art.&lt;/p&gt;

&lt;p&gt;Regarding the language being youthful, of course it is, but the intention is not for the language itself to ‘mature’: no more complexity is going to be added, or at least it’s very unlikely. It is not ‘missing’ comprehensions, or inheritance, or generics, they are &lt;strong&gt;omitted&lt;/strong&gt; (and I pray, always will be). In some way, in the context of the current fashion of returning to more functional languages, or the evolution of good old languages to include more functional paradigms (I’m looking at you Javascript and Python for two examples) then in a tenuous convoluted way Go has ‘innovated’ by avoiding that trend.&lt;/p&gt;

&lt;h2 id=&#34;go-is-an-innovative-thing&#34;&gt;Go is an Innovative Thing&lt;/h2&gt;

&lt;p&gt;It is hard to define what the ‘thing’ is, but it is quite a broad thing, I can’t fully say it is an approach, or a belief, or even ‘patterns and practices’, though that last phrase feels closest. This is still about the best read on the subject: &lt;a href=&#34;https://talks.golang.org/2012/splash.article&#34;&gt;Go at Google: Language Design in the Service of Software Engineering&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Possibly Go’s greatest ‘innovation’ is to eschew making software engineering an overly academic process in daily practice, and to focus on improving the tools, speed, reliability and pure pleasure in &lt;strong&gt;delivering&lt;/strong&gt; and running things of value.&lt;/p&gt;

&lt;p&gt;Thats not to say that Go encourages you hack away without a sound foundation, quite the opposite, I think Go almost &lt;em&gt;requires&lt;/em&gt; you to have a good grasp of the fundamentals, to be an effective Go programmer. I would say that the simplicity and imperative style that Go encourages, tends to demand a greater underlying computer science knowledge than many other languages may expect. Having recently watched &lt;a href=&#34;https://www.youtube.com/watch?v=ClPIeuL9HnI&#34;&gt;Mind the Gap (GopherCon 2016)&lt;/a&gt; I think Katrina Owen echo’s this belief.&lt;/p&gt;

&lt;h3 id=&#34;unifying&#34;&gt;Unifying&lt;/h3&gt;

&lt;p&gt;I think one reasonable way of categorising all the things that make up delivering software products is into: &lt;em&gt;human, operational and technology&lt;/em&gt; factors, in that order of value. Go helps address some problems in all three areas but it is its influence over human and operational factors where it sets itself apart from other systems.&lt;/p&gt;

&lt;p&gt;Even as technologists we can’t help moving things into the ‘human’ domains such as emotion and personalisation, most compilers don’t care about many of the things humans care about, but the language naturally becomes a very human thing.&lt;/p&gt;

&lt;p&gt;Go has learned from the experience of fractured communities and continual in-fighting amongst teams and has attempted to avoid debates that continue to rage in other languages that are 20+ years old. The early focus on idioms helped that. This approach comes from years of experience delivering in teams at scale, where the language is one small factor, which has caused an inappropriate amount of time wasted on a tiny fraction of the whole value. As an example: curly brace positioning is one of the most trivial things possible, and yet still many hours are wasted on it.&lt;/p&gt;

&lt;h3 id=&#34;paradox-of-choice&#34;&gt;Paradox of Choice&lt;/h3&gt;

&lt;p&gt;In all languages there are always some basic primitives and data types that relate closely to the machine instruction set, which in turns map well to the hardware (see &lt;a href=&#34;http://danmux.com/posts/what_golang_isnt#note-1&#34;&gt;Note 1.&lt;/a&gt;) Ultimately all other higher order data structures in all languages are composed of arrays, references, and structs. Trees, heaps, sets, queues and everything else effectively only manipulate arrays of structs/primitives or self referencing structs, thats it, simple, or it should be.&lt;/p&gt;

&lt;p&gt;In the Go language at its heart that simplicity is encouraged, we are only offered some basics. To start with we are given primitives, structs and arrays, then because it is unavoidably useful we have a dynamic array, a &lt;code&gt;Slice&lt;/code&gt; which is an embellished array to allow dynamic resizing. Finally, in certain problem domains the power and flexibility of a hash-map is also unavoidable, therefore Go provides a &lt;code&gt;Map&lt;/code&gt; built in. These are given some special treatment, simply because it is very useful and they are special, (providing the same treatment to function returns would add low value complexity)&lt;/p&gt;

&lt;p&gt;There is a subtlety to providing only this subset. The fact they map well to lower layers imbues an immediate sense of being more intimate with the CPU, which certainly for ‘older’ engineers feels refreshing, and at a minimum for younger engineers tends to influence design decisions towards simplicity. Having said that the desire to construct complex implementations of data structures - even if used only once - is ever present when a new arrival to Go finds their favourite container is ‘missing’.&lt;/p&gt;

&lt;p&gt;To provide any solution in Go that needs a dynamic data structure you can choose between hand rolled linked structures or a &lt;code&gt;Slice&lt;/code&gt; or &lt;code&gt;Map&lt;/code&gt; (or compose with them). As they are quite different the choice is normally obvious. Contrast this to the choice between map, set, hashset, bag etc etc, or rolling your own in a language that makes this a lot harder. Often the author actually only uses a subset of the functionality of those data structures. In these cases the choice becomes much less simple, indeed often a point of confusion and contention and can be the cause of further low-value conversations.&lt;/p&gt;

&lt;p&gt;A Go programmer takes a slice or map and mixes in a few functions to provide the structure they need. For example The Go standard library has provided a minimal &lt;code&gt;container&lt;/code&gt; package with a &lt;code&gt;heap&lt;/code&gt; (which is just an interface), a &lt;code&gt;list&lt;/code&gt; (doubly linked), and a &lt;code&gt;ring&lt;/code&gt; (which is a closed doubly linked list). To implement a heap - you need to provide a builtin to implement the storage with an array being the typical choice.&lt;/p&gt;

&lt;p&gt;Each one of those packages has no more than around 200 lines of code. Those few lines of code are very readable, the behaviour understandable, and the performance predictable; being a function of the performance of the well understood builtin and the users own implementation code.&lt;/p&gt;

&lt;p&gt;This removal of choice and focus on reusing the two builtins, drives a readability, clarity and consistency amongst Go programmers, not afforded in other languages.&lt;/p&gt;

&lt;p&gt;In other languages an iterator (one of the often complained about omissions) necessarily abstracts that which is being contained, and often insists on a broad interface some of which then remains unused, and adds some cognitive load, sometimes unnecessarily. Not providing an iterator and not providing many containers implementing iterable, or whatever other system, avoids needing a whole swathe of knowledge, indirection, discussion and misunderstanding, at little practical cost.&lt;/p&gt;

&lt;p&gt;The effect of the omission in real world code results in minimal extra work at code creation time, for great gains in the rest of the lifecycle. Custom data structures can be composed from the well understood builtins, rolled in under 100 lines of code and can can exist close to the place they are used (yes repeated!). The effect of this approach on readability, maintainability, decoupling, removing seemingly endless low value conversations, and when push comes to shove the ability to understand performance characteristics and then tune them, adds so much more value to the whole lifecycle, than the cost of the omission.&lt;/p&gt;

&lt;p&gt;These are subtle yet important factors that attempt to address some of the human and operational complications.&lt;/p&gt;

&lt;h2 id=&#34;more-than-a-language&#34;&gt;More Than a Language&lt;/h2&gt;

&lt;p&gt;Without going into all of the things that the Go ecosystem brings to the table on top of the language design, what should be clear from a shallow familiarity with the tooling is that Go has focussed on providing answers to some of the more difficult aspects of actually getting code that is both stable and agile into production. These things that were part of Go from the beginning have had to evolve over decades in other languages, often in fractured directions - again adding the paradox of choice. For example Go’s dependency management attempts to solve a thorny problem, and while &lt;code&gt;go get&lt;/code&gt; in particular is going through some teething pains, its inclusion from day one is illustrative of Go’s intention.&lt;/p&gt;

&lt;p&gt;It is this focus on the operational aspects of development, so early on in Go’s evolution that emphasises the reason Go was created, and is commonly overlooked in favour of low value critiques of the language itself.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;note-1&#34;&gt;Note 1.&lt;/h2&gt;

&lt;p&gt;In our Von Neumann / Harvard world we have basically three hardwired data structures, a register, a stack, and addressable memory, these are mapped via the instruction set to: register operations; effectively push and pop, moving data to and from memory addresses, and in CISC’s contiguous memory operations, even in RISC’s loop primitives are optimised for contiguous ranges. Ultimately these in turn map through compilers to value variables (which indirect the decision to use registers, the stack, or an addressable value), and reference variables, which contain the value of an address of the value, and slightly higher up the conceptual scale: arrays. Compilers also compose these fundamental variables into primitive data types: ints, floats, and arrays into strings etc. Finally, also through well managed contiguous memory, namely ‘packing’, common primitives are grouped into ‘structs’. There are subtle variations on these themes, particularly with respect to structs or objects, involving further indirection (think v-tables etc), but that is the crux of it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Test Pyramid and Availability Bias</title>
      <link>http://danmux.com/posts/test_pyramid_availability_bias/</link>
      <pubDate>Mon, 21 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>http://danmux.com/posts/test_pyramid_availability_bias/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid&#34;&gt;The test pyramid&lt;/a&gt; has its place - it gets across a simple idea, but it has been taken too literally, and applied innapropriately.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-pyramid-and-dificult-compromises&#34;&gt;The Pyramid and Dificult Compromises&lt;/h2&gt;

&lt;p&gt;My understanding of Cohns original article was that people too often downplay the service or integration tests, and I think discussions of the pyramid miss this emphasis, and have focused too much on the Pyramid itself.&lt;/p&gt;

&lt;p&gt;Unit vs X Tests (where X = any name for anything other than Unit)  must be the most tiresome debate ever in the history of software development. Over the years I have often found myself encouraging and sometimes justifying my compromises. My arguments have never been devastatingly good, because like any engineering there are often many good enough ways to achieve the desired outcome.&lt;/p&gt;

&lt;p&gt;&amp;lsquo;Good enough&amp;rsquo; is at the heart of all engineering. Good enough to manage the risks with just enough confidence. From past experience I have, in general, found that developers from a computer science background sometimes struggle with &amp;lsquo;engineering compromise&amp;rsquo; more than those from an engineering background.&lt;/p&gt;

&lt;p&gt;Judging good enough and risk is hard and takes confidence and experience to get the balance right in the many different projects and products we work within. A set of tried and tested prescriptions is always more straight forward.&lt;/p&gt;

&lt;h2 id=&#34;the-base-of-the-pyramid-problem&#34;&gt;The Base of the Pyramid Problem&lt;/h2&gt;

&lt;p&gt;It is way too prescriptive:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It oversimplifies the situation, so it is used as a crutch to avoid critical thinking (notice I avoided the phrase containing the word &amp;lsquo;cargo&amp;rsquo;). How often would 70:20:10 be perfect for your situation.&lt;/li&gt;
&lt;li&gt;The top of the pyramid refers explicitly to GUI based tests, often irrelevant, often the people who mention it forget this. (However, even a testing trapezoid would still be wrong)&lt;/li&gt;
&lt;li&gt;True user testing is completely ignored - experience - emotion - engagement (Dare I say quality as &lt;a href=&#34;https://en.wikipedia.org/wiki/Zen_and_the_Art_of_Motorcycle_Maintenance&#34;&gt;Persig&lt;/a&gt; defines it &amp;ldquo;Quality is the knife-edge of experience, found only in the present, known or at least potentially accessible to all of us&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;It is based on the false assumption that integration tests are slow and flaky, they can be as fast and robust as unit tests.&lt;/li&gt;
&lt;li&gt;It is 4 years old - the world has turned. Modern GUI&amp;rsquo;s (think Mobile and &lt;a href=&#34;https://en.wikipedia.org/wiki/Single-page_application&#34;&gt;SPA&lt;/a&gt;) are almost always cleanly divided by a well defined API. (if not then it&amp;rsquo;s not a testing problem, but a design problem)&lt;/li&gt;
&lt;li&gt;It downplays the relevance of boundary interactions, particularly during concurrency.&lt;/li&gt;
&lt;li&gt;Unit tests are subject to availability bias - and take on an inflated importance because of it.&lt;/li&gt;
&lt;li&gt;Unit tests themselves are a kind of availability bias - because they are easy to write and run they are used in the place of a more difficult, more complex, more valuable strategy, one that only becomes clear when you critically assess the real risks affecting quality.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;an-illustration-of-broken-thinking&#34;&gt;An Illustration of Broken Thinking&lt;/h2&gt;

&lt;p&gt;The article most cited to me is the well read &lt;a href=&#34;http://martinfowler.com/bliki/TestPyramid.html&#34;&gt;Test Pyramid&lt;/a&gt; by Martin Fowler which references the original Mike Cohn article, &lt;a href=&#34;https://www.mountaingoatsoftware.com/blog/the-forgotten-layer-of-the-test-automation-pyramid&#34;&gt;The Forgotten Layer of the Test Automation Pyramid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Martins post links to another well known supporting article from the Google Testing Blog with the deliberately captivating title&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://googletesting.blogspot.ch/2015/04/just-say-no-to-more-end-to-end-tests.html&#34;&gt;Just Say No to More End-to-End Tests&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Which captures the narrow experiences and environment of one setup with some fundamental problems. Some parts of that Google testing blog post I simply did not fully understand until a few re-reads, and even then I was left questioning the validity of what I read. I felt it sounded outdated, and was based on some strange assumptions, it appears I am not alone.&lt;/p&gt;

&lt;p&gt;A counterpoint is posted on Martin’s post, which is also worth reading: &lt;a href=&#34;https://www.symphonious.net/2015/04/30/making-end-to-end-tests-work/&#34;&gt;Making End-to-End Tests Work&lt;/a&gt; which succinctly points out some limitation of the test system mentioned in the Google testing blog post above&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;If your idea of fantastic test infrastructure starts with the words “every night” and ends with an email being sent you’re doomed&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Google post is further analytically &lt;a href=&#34;http://bryanpendleton.blogspot.com.au/2015/04/on-testing-strategies-and-end-to-end.html?m=1&#34;&gt;dismembered here&lt;/a&gt;, and this article captures my own confusion well&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Whatever went wrong with this project, though, one thing is very clear to me:&lt;/p&gt;

&lt;p&gt;The testing strategy is not the problem here.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;detail-of-availability-bias&#34;&gt;Detail of Availability Bias&lt;/h2&gt;

&lt;p&gt;(my own pseudo science - feel free to skip to next section (but there is mention of interesting work in any case))&lt;/p&gt;

&lt;p&gt;Recently I have been reading a fascinating book that has long been on my to-read list: &lt;a href=&#34;http://www.amazon.co.uk/Thinking-Fast-Slow-Daniel-Kahneman/dp/0141033576&#34;&gt;Kahneman&amp;rsquo;s Thinking Fast and Slow&lt;/a&gt;. Fortuitously Kahneman has gifted me another tool in my arsenal against the over valuing of unit tests. Availability bias.&lt;/p&gt;

&lt;p&gt;The over importance of unit testing may just be down to availability bias.&lt;/p&gt;

&lt;p&gt;When I analyse the past encounters over the issue of unit testing vs other types of testing, I suspect this bias (or availability heuristic as it is also known) may be the main factor that tips the balance in favour of unit tests and has resulted in them appearing to be so important.&lt;/p&gt;

&lt;p&gt;Whilst I can&amp;rsquo;t do the book justice here, I&amp;rsquo;ll try and capture the salient points. Availability bias is an example of many evolutionary shortcuts in the human mind that can substitute a simple emotional decision for an otherwise difficult complex one, and has been demonstrated in many, brilliant, simple psychological experiments.&lt;/p&gt;

&lt;p&gt;In particular, according to Kahneman, Norbert Schwarz showed the paradox that we are less confident in our decision when asked to come up with more reasons why it is a good decision. Our brains make an overconfident emotional decision when we can immediately produce a few supporting reasons, and a less confident decision, when forced to think harder. This is one of those paradoxes which are obvious when pointed out.&lt;/p&gt;

&lt;p&gt;The book goes onto describe some related effects, regarding risk, which triggered my connection with testing, because I think much more in terms of risk than of test type, or test metric. Research by Paul Slovic, Sarah Lichtenstein and Baruch Fischhoff Showed that scientists opinions on the benefits of a particular technology could be increased by downplaying the risks, and similarly that the perception of the risks of a technology would be decreased, just by describing the benefits.&lt;/p&gt;

&lt;p&gt;It is clear how this emotional bias can be applied to software testing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A lack of unit tests most often described as (and can be) a risk - therefore the benefits of unit tests are exaggerated in our minds.&lt;/li&gt;
&lt;li&gt;We can quickly recall a few examples of people who repeat the advantages of unit tests, and quickly recall a few personal experiences that support their advantage so the risks of focussing on them are downplayed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is all based in normal animal survival laziness - it takes energy for our deep thinking brain to engage.&lt;/p&gt;

&lt;p&gt;A more direct consequence of our natural laziness also has a different type of biasing effect on the increased value attributed to unit testing.&lt;/p&gt;

&lt;p&gt;It is hard for anyone deeply embedded in a development team to truly know how valuable the team is, or, where necessary, how valuable individual members of the team are, or even how good the product is. The situation has developed where the very people responsible for the success of a development team are some of the least likely to be able to make an objective decision. Under these conditions it is easy to see how &amp;lsquo;measurement&amp;rsquo; is needed, it is this natural laziness that allows easy measurements to become so influential.&lt;/p&gt;

&lt;p&gt;Unit tests are easy, and the quick visibility they afford in the form of the second most harmfull metric in development - coverage, creates something measurable. This is an easy metric, and when coupled with the biases of 1 and 2 above it is easy to see how unit testing and test coverage take on a an overly exaggerated value. Perhaps most often outside of the team who writes the tests.&lt;/p&gt;

&lt;p&gt;I also think it is likely that we are still suffering the rebound from 10 years ago when test automation and unit testing were much less an integral part of the development cycle. The easiest goto tool in the interim has been the unit test.&lt;/p&gt;

&lt;h2 id=&#34;the-smart-way&#34;&gt;The Smart Way&lt;/h2&gt;

&lt;p&gt;Whilst this post actually started out as a document of my linking availability bias with the over emphasis on unit testing and was not meant to be about the value of various tests in practice, it is probably clear that I encourage a more individually considered approach, than a set of prescribed rules.&lt;/p&gt;

&lt;p&gt;I want to make it clear that I totally understand that there are loads of cases, particularly on the computer science focussed side of development where unit tests are essentially the only sensible test strategy. But they are only one part of the package, and often a small part.&lt;/p&gt;

&lt;p&gt;In this article: &lt;a href=&#34;http://www.joecolantonio.com/2015/12/09/why-the-testing-pyramid-is-misleading-think-scales/&#34;&gt;Why the Testing Pyramid is Misleading&lt;/a&gt; the author discusses Todd Gardners (TrackJs) views which could be concieved to be indirectly addressing availability bias of unit tests, by making the point that we tend to not think in terms of risk. This article resonates strongly with my own approach to quality (again where quality is typically a bigger thing than that which we normally test for)&lt;/p&gt;

&lt;p&gt;That article references the video offering very sensible advice from Todd Gardner, Software Engineer and Entrepreneur at TrackJS, namely think critically&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://vimeo.com/144684986&#34;&gt;Case Studies in Terrible Testing&lt;/a&gt;
(slide deck &lt;a href=&#34;http://www.slideshare.net/todd3091/case-studies-in-terrible-testing&#34;&gt;here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Especially salient is the advice from 25 minutes on, though this picture of the relative importance of different testing to mitigate the scale of the risks to the success of one particular project should illustrate the main thrust of the presentation&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/-uyf9z1SiSgw/Vnft1EYuFaI/AAAAAAAAMlQ/j_PQhbHL-jI/w1167-d-h870-p-rw&#34; alt=&#34;testing scales&#34; title=&#34;Testing Scales&#34; /&gt;
&lt;em&gt;Figure 1. A custom set of sliding scales of differing test strategies&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we truly think about how we can best reduce the risk to success, and use alternative appropriate tools to manage that risk we start to focus more on delivering real value.&lt;/p&gt;

&lt;p&gt;Monitoring, CD, and a real understanding of the users perceived value or quality through canary code, A/B testing and the like will have a much bigger impact than 70% coverage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Fast to fix is almost as good as never broken (and sometimes better)&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;(from Todd’s slides above)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The ‘scales of risk’ metaphor is much more intelligent and appropriate than the pyramid. The pyramid is one combination of the risk scales which may well align with a correct assignment of risk in a minority of real world cases (as would the ice cream cone). Though as far as I remember, not on any projects I have worked on.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>